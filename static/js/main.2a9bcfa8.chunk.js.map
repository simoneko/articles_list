{"version":3,"sources":["Components/Article.js","Components/ArticlesList.js","Components/App.js","serviceWorker.js","index.js"],"names":["Article","state","id","_this","props","title","body","isOpened","showArticle","setState","_this2","this","_this$state","articleBody","map","p","ReactHtmlParser","data","react_default","a","createElement","className","onClick","react_collapse_lib","React","Component","ArticlesList","listOfArticles","list","article","Components_Article","key","App","articles","error","isLoaded","open","getArticles","_callee","query","response","regenerator_default","wrap","_context","prev","next","axios","post","sent","t0","stop","console","log","message","Components_ArticlesList","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAuCeA,6MAhCbC,MAAQ,CACNC,GAAIC,EAAKC,MAAMF,GACfG,MAAOF,EAAKC,MAAMC,MAClBC,KAAMH,EAAKC,MAAME,KACjBC,UAAU,KAGZC,YAAc,WACZL,EAAKM,SAAS,CACZF,UAAWJ,EAAKF,MAAMM,oFAMjB,IAAAG,EAAAC,KAAAC,EAE2BD,KAAKV,MAA/BI,EAFDO,EAECP,MAAOC,EAFRM,EAEQN,KAAMC,EAFdK,EAEcL,SAGfM,EAAcP,EAAKQ,IAAI,SAAAC,GAAO,OAAOC,IAAgBD,EAAEE,QAC7D,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIE,QAAS,kBAAMZ,EAAKF,gBAAiBH,GACzCa,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUhB,SAAUA,GACjBM,WA3BWW,IAAMC,WCcbC,UAfM,SAACtB,GAEpB,IAAMuB,EAAiBvB,EAAMwB,KAAKd,IAAI,SAAAe,GAAO,OAAIX,EAAAC,EAAAC,cAACU,EAAD,CAASC,IAAKF,EAAQ3B,GAAIA,GAAI2B,EAAQ3B,GAAIG,MAAOwB,EAAQxB,MAAOC,KAAMuB,EAAQvB,KAAME,YAAaJ,EAAMI,gBAGxJ,OAIEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZM,sBC+IQK,6MApGb/B,MAAQ,CACNgC,SAAU,CACR,CACE/B,GAAI,EACJG,MAAO,YACPC,KAAM,gFAER,CACEJ,GAAI,EACJG,MAAO,YACPC,KAAM,gFAER,CACEJ,GAAI,EACJG,MAAO,YACPC,KAAM,iFAGVsB,KAAM,GACNM,MAAO,KACPC,UAAU,EACVC,KAAM,MAGRC,kDAAc,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAAtB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEaC,IAAMC,KAAK,qCAAsC,CACtER,UAHQ,OAEJC,EAFIG,EAAAK,KAMV7C,EAAKM,SAAU,CACb0B,UAAU,EACVP,KAAMY,EAASvB,KAAKA,KAAKgB,WARjBU,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAYVxC,EAAKM,SAAS,iBAAO,CAAEyB,MAAKS,EAAAM,MAZlB,yBAAAN,EAAAO,SAAAZ,EAAA,0JAiDZ3B,KAAK0B,YAbM,uNAmBJ,IAAAzB,EAE2BD,KAAKV,MAA/BiC,EAFDtB,EAECsB,MAAOC,EAFRvB,EAEQuB,SAAUP,EAFlBhB,EAEkBgB,KACzB,OAAIM,GACFiB,QAAQC,IAAIlB,EAAMM,UACXtB,EAAAC,EAAAC,cAAA,WAAMc,EAAMmB,UACTlB,EAIRjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAc1B,KAAMA,IAEnBuB,QAAQC,IAAIxB,IANVV,EAAAC,EAAAC,cAAA,gCAxFKI,IAAMC,WC3CJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a9bcfa8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Article.css';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Collapse } from 'react-collapse';\r\n\r\nclass Article extends React.Component {\r\n\r\n  state = {\r\n    id: this.props.id,\r\n    title: this.props.title,\r\n    body: this.props.body,\r\n    isOpened: false\r\n  }\r\n\r\n  showArticle = () => {\r\n    this.setState({\r\n      isOpened: !this.state.isOpened\r\n    })\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const { title, body, isOpened } = this.state;\r\n\r\n\r\n    const articleBody = body.map(p => { return ReactHtmlParser(p.data) })\r\n    return (\r\n      <div className=\"article\">\r\n        <h1 onClick={() => this.showArticle()} >{title}</h1>\r\n        <Collapse isOpened={isOpened} >\r\n          {articleBody}\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport Article from './Article';\r\nimport '../styles/ArticlesList.css';\r\n\r\nconst ArticlesList = (props) => {\r\n\r\n  const listOfArticles = props.list.map(article => <Article key={article.id} id={article.id} title={article.title} body={article.body} showArticle={props.showArticle} />);\r\n\r\n\r\n  return (\r\n\r\n\r\n\r\n    <div className=\"articlesList\">\r\n      {listOfArticles}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArticlesList;","import React from 'react';\nimport '../styles/App.css';\nimport ArticlesList from './ArticlesList';\n// import ApolloClient, { gql } from \"apollo-boost\";\n// import { ApolloProvider, Query } from 'react-apollo';\n\nimport axios from 'axios';\n\n// const client = new ApolloClient({\n//   uri: \"https://mobileapi.wp.pl/v1/graphql\"\n// });\n\n// client.query({\n//   query: gql`\n//       {\n//         articles(t: Article, limit: 10) {\n//           id\n//           title\n//           body {\n//             data\n//           }\n//         }\n//       }`\n// }).then(result => console.log(result.data.articles));\n\n// const ExchangeRates = () => (\n//   <Query\n//     query={gql`\n//     {\n//       articles(t: Article, limit: 10) {\n//         id\n//         title\n//         body {\n//           data\n//         }\n//       }\n//     }`\n//     }\n//   >\n//     {({ loading, error, data }) => {\n//       if (loading) return <p>Loading...</p>;\n//       if (error) return <p>Error!</p>;\n\n//       return data.articles.map(({ id, title }) => (\n//         <div key={id} >\n//           <p>{title}</p>\n//         </div>\n//       ))\n//     }}\n\n//   </Query>\n// )\n\n\n\nclass App extends React.Component {\n\n  state = {\n    articles: [\n      {\n        id: 1,\n        title: \"Article 1\",\n        body: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum, consequatur.\"\n      },\n      {\n        id: 2,\n        title: \"Article 2\",\n        body: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum, consequatur.\"\n      },\n      {\n        id: 3,\n        title: \"Article 3\",\n        body: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum, consequatur.\"\n      }\n    ],\n    list: [],\n    error: null,\n    isLoaded: false,\n    open: ''\n  }\n\n  getArticles = async (query) => {\n    try {\n      const response = await axios.post('https://mobileapi.wp.pl/v1/graphql', {\n        query\n      });\n\n      this.setState(({\n        isLoaded: true,\n        list: response.data.data.articles\n      }))\n\n    } catch (error) {\n      this.setState(() => ({ error }))\n    }\n  }\n\n\n\n  componentDidMount() {\n    // client.query({\n    //   query: gql`\n    //       {\n    //         articles(t: Article, limit: 10) {\n    //           id\n    //           title\n    //           body {\n    //             data\n    //           }\n    //         }\n    //       }` \n    // }).then(result => {\n    //   this.setState({\n    //     list: result.data.articles\n    //   })\n    // })\n\n    const query =\n      `\n        {\n          articles(t: Article, limit: 10) {\n            id\n            title\n            body {\n              data\n            }\n          }\n        }\n      `;\n\n    this.getArticles(query);\n\n\n\n  }\n\n  render() {\n\n    const { error, isLoaded, list } = this.state;\n    if (error) {\n      console.log(error.response)\n      return <div>{error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <div className=\"App\">\n          <ArticlesList list={list} />\n\n          {console.log(list)}\n\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}