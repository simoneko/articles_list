{"version":3,"sources":["Components/Article.js","Components/ArticlesList.js","Components/Off.js","Components/App.js","serviceWorker.js","index.js"],"names":["Article","state","isOpen","toggle","_this","setState","props","showArticle","id","prevProps","currentID","this","_this2","_this$props","title","body","img","alt","articleBody","map","p","ReactHtmlParser","data","react_default","a","createElement","className","onClick","renderprops","items","config","duration","from","height","overflow","enter","leave","style","src","React","Component","ArticlesList","listOfArticles","list","article","Components_Article","key","original_url","description","Off","App","error","isLoaded","isArticleOpen","offset","getArticles","_callee","query","response","regenerator_default","wrap","_context","prev","next","concat","axios","post","sent","Object","toConsumableArray","articles","t0","console","log","setTimeout","stop","newID","getMore","_this$state","dist","message","Components_Off","Components_ArticlesList","react_loader_spinner_default","type","color","width","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","Components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85fc27e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Transition } from \"react-spring/renderprops\";\r\nimport '../styles/Article.css';\r\n\r\nclass Article extends React.Component {\r\n\r\n  state = {\r\n    isOpen: false\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      prevProps.currentID !== this.props.currentID &&\r\n      this.props.id !== this.props.currentID\r\n    ) {\r\n      this.setState({ isOpen: false });\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen })\r\n    this.props.showArticle(this.props.id)\r\n  }\r\n\r\n\r\n  render() {\r\n    const { title, body, img, alt } = this.props;\r\n\r\n    const articleBody = body.map(p => { return ReactHtmlParser(p.data) })\r\n\r\n    return (\r\n      <div className=\"article\">\r\n        <h1 className=\"title\" onClick={() => {\r\n          this.toggle();\r\n        }}>{title}</h1>\r\n\r\n        <Transition\r\n          items={this.state.isOpen}\r\n          config={{ duration: 300 }}\r\n          from={{ height: 0, overflow: \"hidden\" }}\r\n          enter={[{ height: \"auto\", overflow: \"auto\" }]}\r\n          leave={{ height: 0, overflow: \"hidden\" }}\r\n        >\r\n          {isOpen =>\r\n            isOpen && (props => <div style={props} className=\"content\"><img className=\"articleImg\" src={img} alt={alt} />{articleBody}</div>)\r\n          }\r\n        </Transition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport Article from './Article';\r\nimport '../styles/ArticlesList.css';\r\n\r\nconst ArticlesList = (props) => {\r\n\r\n  const listOfArticles = props.list.map(article =>\r\n    <Article\r\n      key={article.id}\r\n      id={article.id}\r\n      title={article.title}\r\n      body={article.body}\r\n      img={article.img.original_url}\r\n      alt={article.img.description}\r\n      showArticle={props.showArticle}\r\n      currentID={props.currentID}\r\n    />\r\n  );\r\n\r\n  return (\r\n\r\n    <div className=\"articlesList\">\r\n      {listOfArticles}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArticlesList;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../styles/Off.css'\r\n\r\nconst Off = () => {\r\n  return (\r\n    <div id=\"off\">\r\n      <p>Wygląda na to, że internet na dziś został wyczerpany.</p>\r\n      <p>Jeżeli w związku z tym masz za dużo wolnego czasu, to polecam książkę Juliusza Verne'a\r\n      <br />\r\n        <i>Dwadzieścia tysięcy mil podmorskiej żeglugi</i></p>\r\n      <p>Poniżej trochę Bacon Ipsum:</p>\r\n      <p>Bacon ipsum dolor amet tail doner buffalo filet mignon salami tenderloin t-bone. Prosciutto chuck cow, buffalo cupim flank pancetta frankfurter shoulder meatloaf capicola. Tri-tip doner alcatra, chicken burgdoggen short loin capicola drumstick. Drumstick ground round landjaeger ribeye capicola ball tip flank cow jerky pork belly tail meatball strip steak frankfurter. Picanha cupim prosciutto, hamburger sausage kevin chicken beef andouille t-bone sirloin pork belly swine. Alcatra chuck ribeye pastrami corned beef pork short ribs filet mignon andouille meatball.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Off;","import React from 'react';\nimport ArticlesList from './ArticlesList';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\nimport { Offline, Online } from \"react-detect-offline\";\nimport Off from './Off';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  state = {\n    list: [],\n    error: null,\n    isLoaded: false,\n    currentID: '',\n    isArticleOpen: false,\n    offset: 0\n  }\n\n  getArticles = async (offset) => {\n    const query =\n      `\n      {\n        articles(t: Article, limit: 10, offset: ${offset}) {\n          id\n          title\n          body {\n            data\n          }\n          img {\n            original_url\n            description\n          }\n        }\n      }\n    `;\n\n    try {\n      const response = await axios.post('https://mobileapi.wp.pl/v1/graphql', {\n        query\n      });\n\n      this.setState(({\n        isLoaded: true,\n        list: [...this.state.list, ...response.data.data.articles],\n      }))\n\n    } catch (error) {\n      console.log(error);\n      this.setState(() => ({ error }))\n      setTimeout(() => {\n        this.setState({ error: null })\n      }, 4000);\n    }\n  }\n\n  showArticle = (newID) => {\n    this.setState({\n      currentID: newID,\n    })\n  }\n\n  getMore = () => {\n    this.getArticles(this.state.offset + 10);\n    this.setState({ offset: this.state.offset + 10 })\n  }\n\n  componentDidMount() {\n    this.getArticles(0);\n  }\n\n  render() {\n    const { error, isLoaded, list } = this.state;\n\n    if (!isLoaded) {\n      return (\n        <div id=\"loader\" >\n          <Loader\n            type=\"CradleLoader\"\n            color=\"#00BFFF\"\n            height=\"100\"\n            width=\"100\"\n          />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n          {error && <div>\n            <Online><div id=\"error\" >{error.message}</div></Online>\n            <Offline ><Off /></Offline>\n          </div>}\n          <ArticlesList\n            list={list}\n            showArticle={this.showArticle}\n            currentID={this.state.currentID}\n            isArticleOpen={this.state.isArticleOpen}\n          />\n          <button id=\"getMore\" onClick={this.getMore}>Załaduj kolejne 10 artykułów</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css';\n\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}